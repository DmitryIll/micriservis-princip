

# https://github.com/pablovelascodev/auth-nginx-api-gateway

events {
    worker_connections 1024;
}

http {
    server {
        listen 80;

# **security**

# location register
# **POST /v1/register**
# - регистрация пользователя POST /v1/user, - видимо опечатка и нужно так:
# - регистрация пользователя POST /v1/register
# 1. Анонимный доступ.
# 2. Запрос направляется в сервис security POST /v1/user. - тут видимо опечкта, нужно так:
# 2. Запрос направляется в сервис security POST /v1/register

# location token
# **POST /v1/token**
# - логин пользователя POST /v1/token,
# 1. Анонимный доступ.
# 2. Запрос направляется в сервис security POST /v1/token.

# location /token/validation
# **GET /v1/token/validation**
# - проверка токена GET /v1/token/validation.

# loction user
# **GET /v1/user**
# - получение информации о пользователе GET /v1/user,
# 1. Проверка токена. Токен ожидается в заголовке Authorization. Токен проверяется через вызов сервиса security GET /v1/token/validation/.
# 2. Запрос направляется в сервис security GET /v1/user.

# **upload**

# location upload
# **POST /v1/upload**
# 1. Проверка токена. Токен ожидается в заголовке Authorization. Токен проверяется через вызов сервиса security GET /v1/token/validation/.
# 2. Запрос направляется в сервис uploader POST /v1/upload.

# **images**
# location images
# **GET /v1/user/{image}**
# 1. Проверка токена. Токен ожидается в заголовке Authorization. Токен проверяется через вызов сервиса security GET /v1/token/validation/.
# 2. Запрос направляется в сервис minio GET /images/{image}.
# тут не понятно, выше /v1/user/{image} а далее /images/{image} - видимо на /v1/user/{image} ?

# ------------------------------------------------------------------------
# Примеры запросов:
# Авторизация
# curl -X POST -H 'Content-Type: application/json' -d '{"login":"bob", "password":"qwe123"}' http://localhost/token

# **Загрузка файла**
# curl -X POST -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJib2IifQ.hiMVLmssoTsy1MqbmIoviDeFPvo-nCd92d4UFiN2O2I' -H 'Content-Type: octet/stream' --data-binary @yourfilename.jpg http://localhost/upload

# **Получение файла**
# curl -X GET http://localhost/images/4e6df220-295e-4231-82bc-45e4b1484430.jpg       

# -------------------------------------------------------------------------------------
# location status Анонимный (GET) -> status
        location /status {
            internal;
            proxy_pass              http://security:3000/status;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }

# location register Анонимный (POST) -> /v1/register
        location /register {
            internal;
            proxy_pass              http://security:3000/status;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }

# location token Анонимный (POST) -> /v1/token
        location /token {
            internal;
            proxy_pass              http://security:3000/v1/token;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }
        
# location /token/validation Анонимный (GET) -> /v1/token/validation
        location /token/validation {
            internal;
            proxy_pass              http://security:3000/v1/token/validation;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }

# loction user Authorization (GET) ->  /v1/user

        location /user {
            auth_request /token/validation;
            proxy_pass              http://security:3000/v1/user;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }
# location upload Authorization (POST) -> /v1/upload
        location /upload/ {
            auth_request /token/validation;
            proxy_pass              http://uploader:3000/v1/upload;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }

# location images Authorization (GET) ->  /v1/user/{image}

        location /images/ {
            auth_request /token/validation;
            #  как правильжно передать?
            proxy_pass              http://storage:9000/v1/user/;
            # proxy_set_header        Content-Length "";
            # proxy_set_header        X-Original-URI $request_uri;
        }

    }
}